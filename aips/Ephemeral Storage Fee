---
aip: 
title: Ephemeral Storage Fee and Refundable State Bytes
author: msmouse
discussions-to (*optional): 
Status: Withdrawn
last-call-end-date (*optional):
type: Gas
created: 12/12/2023
updated (*optional): 
requires (*optional): 
---

# AIP-X - Ephemeral Storage Fee and Refundable State Bytes

## Summary

Proposed is an evolvement of the Strorage Fee charging scheme where permanent and ephemeral storage are priced respectively according to their distinct characteristics. Permanent fee charges are refunadable if the item gets deleted while ephemeral fee charges are final and not refundable. The updated scheme aligns better with the reality of disk space consumption by the transactions hence serves as a better economic benchmark for the developers to optimize the cost of transactions.


# Background
Generally speaking the Aptos nodes keep two categories of blockchain data on disk:

1. Permanant storage: Items in the latest state and associated authentication data structures -- the network has to keep them around indefinitely until a transaction deleted the relevant state. Such storage should be priced high and is subject to refunding once deleted.
2. Ephemeral storage: the transaction itself and it's outputs, including the write set and the events -- they are part of the "ledger history" and subject to pruning. Large transactions and transactions with large outputs can consume the disk space on nodes rapidly despite being enventally pruned, and propagating the bytes across the network is another aspact of resource consumption. Net net, ephemeral storage should be charged expensive enough to retain the network's collective abitlity to keep reasonably long ledger history and propagate them efficiently among nodes, but might be at a lower rate than the permanent storage.

When a state item is updated, and let's say, a large state item increases in size further slightly:
1. there's a small increase in permanent space occupation.
2. the entirety of the new content of the item will end up in the ledger history and lives through the prune window.

Historically the storage fee charging scheme wasn't designed to recogonize the difference between the two. Specifically, to make sure the disk is not filled with permanent state item bytes, storage fee for bytes was high; and to make sure disk is not filled with ephemeral bytes generated by updating large items, the entirety of the updated item is charged for the high rate; and finally to make the cost of common use cases reasonable, there is a per item "free bytes qouta" of 1KB. 

The old scheme penalizes frequently modified large state items heavily hence brought strong incentives for items smaller than the free quota, which imposes awkward trade-offs for developers to design storage granularities of their contracts and potentially make the state explosion problem worse by incentivizing more state items.

### Goals

Remove the per slot free quota and be more friendly to reasonable large items.

...

### Out of Scope

Notice that this AIP is about the Storage Fee which concerns disk space consumption. There's a related concern on the latency side of things which is covered by the Io Gas. Changes needed to be made on that front as well and that's covered by (AIP-59)[https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-59.md]


...

## Impact

Frequently updated larger state items are now cheaper. And when deleted, fees paid for the bytes are refundable. As a result, the developer can now straightforwardly decide on storage granularity according to the access (modification) pattern of things.


## Alternative solutions

N/A

## Specification

1. The per slot "free bytes" quota is removed. Instead, all the bytes of a state item are priced uniformly for the permanent space occupation in the state DB.
2. When the state item changes in size, the new target "deposit" is calculated according to the new size, and the difference between that and what's already paid is charged or refunded. On deletion, both the slot deposit and bytes deposit are refuned. 
3. The ephemeral fee is charged according to the size of the entire item being created or updated, truthfully reflect the impact on the ledger history size and disk / network bandwidth consumption.
4. A per transaction ephemeral fee quota is introduced and the reletive weights between the permenant and ephemeral storage fees are tuned so that commonly seen transaction types are reasonably affordable.


## Reference Implementation

https://github.com/aptos-labs/aptos-core/pull/11279
https://github.com/aptos-labs/aptos-core/pull/11295

## Testing (Optional)

## Risks and Drawbacks


## Timeline

### Suggested implementation timeline

12/2023

### Suggested developer platform support timeline


### Suggested deployment timeline



Release 1.10, early 2024

## Security Considerations


## Open Questions (Optional)

 > Q&A here, some of them can have answers some of those questions can be things we have not figured out but we should
